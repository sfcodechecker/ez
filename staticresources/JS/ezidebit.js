var eziDebit = function () { var e, r, t = "2.0.0", i = {}, a = {}, n = ""; return setValidated = function (e) { n = e }, init = function (t, a, n) { r = t, e = n, a && (mergeFields(i, a), initialiseFields(), initialiseButton()) }, initialiseFields = function () { if ("customerLastName" in i && (a.customerLastName = getElement(i.customerLastName)), "customerRef" in i && (a.customerRef = getElement(i.customerRef)), "customerFirstName" in i && (a.customerFirstName = getElement(i.customerFirstName)), "customerAddress1" in i && (a.customerAddress1 = getElement(i.customerAddress1)), "customerMobile" in i && (a.customerMobile = getElement(i.customerMobile)), "customerAddress2" in i && (a.customerAddress2 = getElement(i.customerAddress2)), "customerSuburb" in i && (a.customerSuburb = getElement(i.customerSuburb)), "customerState" in i && (a.customerState = getElement(i.customerState)), "customerPostcode" in i && (a.customerPostcode = getElement(i.customerPostcode)), "customerEmail" in i && (a.customerEmail = getElement(i.customerEmail)), "customerReference" in i && (a.customerReference = getElement(i.customerReference)), "nameOnCard" in i && (a.nameOnCard = getElement(i.nameOnCard), a.nameOnCard.removeAttribute("name")), "cardNumber" in i && (a.cardNumber = getElement(i.cardNumber), a.cardNumber.removeAttribute("name")), "cardExpiryMonth" in i && (a.cardExpiryMonth = getElement(i.cardExpiryMonth), a.cardExpiryMonth.removeAttribute("name")), "cardExpiryYear" in i && (a.cardExpiryYear = getElement(i.cardExpiryYear), a.cardExpiryYear.removeAttribute("name")), "cardCCV" in i && (a.cardCCV = getElement(i.cardCCV), a.cardCCV.removeAttribute("name")), "paymentAmount" in i && (a.paymentAmount = getElement(i.paymentAmount)), "paymentReference" in i && (a.paymentReference = getElement(i.paymentReference)), "accountName" in i && (a.accountName = getElement(i.accountName)), "accountBSB" in i && (a.accountBSB = getElement(i.accountBSB)), "accountNumber" in i && (a.accountNumber = getElement(i.accountNumber)), "submitButton" in i && (a.submitButton = getElement(i.submitButton)), "submitAction" in i) switch (i.submitAction) { case "ChargeCard": if ("customerDetailsDiv" in i) document.getElementById(i.customerDetailsDiv).style.display = "none" } }, getElement = function (e) { return "string" == typeof e || e instanceof String ? document.getElementById(e) : e }, mergeFields = function (e) { for (var r = 1; r < arguments.length; r++)for (var t in arguments[r]) e[t] = arguments[r][t]; return e }, initialiseButton = function () { a.submitButton && (a.submitButton.onclick = function () { return a.submitButton.setAttribute("disabled", "disabled"), processTransaction(i.submitAction), !1 }) }, processTransaction = function (t) { r ? JSONP.get(e + "/TestPublicKey", { PublicKey: r }, function (e) { if (!e || e.Error > 0) eziDebitErrorMessages.generateError("No valid public key has been specified", i.submitError); else { if (eziDebitValidation.validate(t, i), 1 != n) return a.submitButton.removeAttribute("disabled"), !1; switch (t) { case "ChargeCard": chargeCard(); break; case "SaveCustomer": saveCustomer(); break; case "SaveCustomerAccount": saveCustomerAccount(); break; case "ChangeCustomerPaymentInfo": changeCustomerPaymentInfo() } } }, jsonFailure) : eziDebitErrorMessages.generateError("No public key has been specified", i.submitError) }, jsonFailure = function () { eziDebitErrorMessages.generateError("An error has occurred attempting to contact the API. Please contact Ezidebit support.", i.submitError) }, chargeCard = function (s) { if (void 0 !== s && ((i = s).submitAction = "ChargeCard", initialiseFields(), eziDebitValidation.validate("ChargeCard", i), 0 == n)) return !1; JSONP.get(e + "/ChargeCard", { PublicKey: r, CreditCardExpiryMonth: a.cardExpiryMonth.value, CreditCardNumber: a.cardNumber.value, CreditCardExpiryYear: a.cardExpiryYear.value, CreditCardCCV: a.cardCCV.value, NameOnCreditCard: a.nameOnCard.value, PaymentAmountInCents: Math.round(100 * a.paymentAmount.value), CustomerName: a.nameOnCard.value, PaymentReference: a.paymentReference.value, ReferrerURL: location.href, UserAgent: navigator.userAgent, Version: t }, function (e) { !e || e.Error > 0 ? ("submitButton" in a && a.submitButton.removeAttribute("disabled"), eziDebitErrorMessages.generateError("Ezidebit API Error (" + e.Error + "): " + e.ErrorMessage, i.submitError)) : i.submitCallback && (a.exchangePaymentID && (a.exchangePaymentID.value = e.Data.ExchangePaymentID), "F" == e.Data.PaymentResult && a.submitButton && a.submitButton.removeAttribute("disabled"), i.submitCallback(e.Data)) }, jsonFailure) }, changeCustomerPaymentInfo = function (t) { if (void 0 !== t && ((i = t).submitAction = "ChangeCustomerPaymentInfo", initialiseFields(), eziDebitValidation.validate("ChangeCustomerPaymentInfo", i), 0 == n)) return !1; JSONP.get(e + "/ChangeCustomerPaymentInfo", { PublicKey: r, EzidebitCustomerRef: a.customerRef ? a.customerRef.value : "", YourSystemReference: a.customerReference ? a.customerReference.value : "", CreditCardNumber: a.cardNumber ? a.cardNumber.value : "", CreditCardExpiryMonth: a.cardExpiryMonth ? a.cardExpiryMonth.value : "", CreditCardExpiryYear: a.cardExpiryYear ? a.cardExpiryYear.value : "", NameOnCreditCard: a.nameOnCard ? a.nameOnCard.value : "", AccountName: a.accountName ? a.accountName.value : "", AccountBSB: a.accountBSB ? a.accountBSB.value : "", AccountNumber: a.accountNumber ? a.accountNumber.value : "" }, function (e) { "submitButton" in a && a.submitButton.removeAttribute("disabled"), !e || e.Error > 0 ? eziDebitErrorMessages.generateError("Ezidebit API Error (" + e.Error + "): " + e.ErrorMessage, i.submitError) : i.submitCallback && i.submitCallback(e) }, jsonFailure) }, saveCustomerAccount = function (s) { if (void 0 !== s && ((i = s).submitAction = "SaveCustomerAccount", initialiseFields(), eziDebitValidation.validate("SaveCustomerAccount", i), 0 == n)) return !1; JSONP.get(e + "/AddCustomer", { PublicKey: r, YourSystemReference: a.customerReference ? a.customerReference.value : "", YourGeneralReference: "", LastName: a.customerLastName.value, FirstName: a.customerFirstName ? a.customerFirstName.value : "", AddressLine1: a.customerAddress1 ? a.customerAddress1.value : "", AddressLine2: a.customerAddress2 ? a.customerAddress2.value : "", AddressSuburb: a.customerSuburb ? a.customerSuburb.value : "", AddressState: a.customerState ? a.customerState.value : "", AddressPostCode: a.customerPostcode ? a.customerPostcode.value : "", EmailAddress: a.customerEmail ? a.customerEmail.value : "", MobilePhoneNumber: a.customerMobile ? a.customerMobile.value : "", ContractStartDate: (new Date).toDateString(), SmsPaymentReminder: "N", SmsFailedNotification: "N", SmsExpiredCard: "N", Username: "", CreditCardNumber: "", CreditCardExpiryMonth: "", CreditCardExpiryYear: "", CreditCardCCV: "", NameOnCreditCard: "", PaymentAmount: "0", PaymentReference: a.paymentReference ? a.paymentReference.value : "", AccountName: a.accountName ? a.accountName.value : "", AccountBSB: a.accountBSB ? a.accountBSB.value : "", AccountNumber: a.accountNumber ? a.accountNumber.value : "", ReferrerURL: location.href, UserAgent: navigator.userAgent, Version: t }, function (e) { "submitButton" in a && a.submitButton.removeAttribute("disabled"), !e || e.Error > 0 ? eziDebitErrorMessages.generateError("Ezidebit API Error (" + e.Error + "): " + e.ErrorMessage, i.submitError) : i.submitCallback && i.submitCallback(e) }, jsonFailure) }, saveCustomer = function (s) { if (void 0 !== s && ((i = s).submitAction = "SaveCustomer", initialiseFields(), eziDebitValidation.validate("SaveCustomer", i), 0 == n)) return !1; JSONP.get(e + "/AddCustomer", { PublicKey: r, YourSystemReference: a.customerReference ? a.customerReference.value : "", YourGeneralReference: "", LastName: a.customerLastName.value, FirstName: a.customerFirstName ? a.customerFirstName.value : "", AddressLine1: a.customerAddress1 ? a.customerAddress1.value : "", AddressLine2: a.customerAddress2 ? a.customerAddress2.value : "", AddressSuburb: a.customerSuburb ? a.customerSuburb.value : "", AddressState: a.customerState ? a.customerState.value : "", AddressPostCode: a.customerPostcode ? a.customerPostcode.value : "", EmailAddress: a.customerEmail ? a.customerEmail.value : "", MobilePhoneNumber: a.customerMobile ? a.customerMobile.value : "", ContractStartDate: (new Date).toDateString(), SmsPaymentReminder: "N", SmsFailedNotification: "N", SmsExpiredCard: "N", Username: "", CreditCardNumber: a.cardNumber ? a.cardNumber.value : "", CreditCardExpiryMonth: a.cardExpiryMonth ? a.cardExpiryMonth.value : "", CreditCardExpiryYear: a.cardExpiryYear ? a.cardExpiryYear.value : "", CreditCardCCV: a.cardCCV ? a.cardCCV.value : "", NameOnCreditCard: a.nameOnCard ? a.nameOnCard.value : "", PaymentAmount: a.paymentAmount ? Math.round(100 * a.paymentAmount.value) : "0", PaymentReference: a.paymentReference ? a.paymentReference.value : "", AccountName: a.accountName ? a.accountName.value : "", AccountBSB: a.accountBSB ? a.accountBSB.value : "", AccountNumber: a.accountNumber ? a.accountNumber.value : "", ReferrerURL: location.href, UserAgent: navigator.userAgent, Version: t }, function (e) { "submitButton" in a && a.submitButton.removeAttribute("disabled"), !e || e.Error > 0 ? eziDebitErrorMessages.generateError("Ezidebit API Error (" + e.Error + "): " + e.ErrorMessage, i.submitError) : i.submitCallback && i.submitCallback(e) }, jsonFailure) }, { init: init, getElement: getElement, isValidated: n, set: setValidated, chargeCard: chargeCard, saveCustomer: saveCustomer, saveCustomerAccount: saveCustomerAccount, changeCustomerPaymentInfo: changeCustomerPaymentInfo } }(), eziDebitErrorMessages = (genError = function (e, r, t) { r(e, t) }, { generateError: genError }), eziDebitValidation = (performValidation = function (e, r) { switch (e) { case "SaveCustomerAccount": if (!validateAccountDetails(r)) return eziDebit.set(!1), !1; eziDebit.set(!0); break; case "ChargeCard": if (!validateCardDetails(r, !0)) return eziDebit.set(!1), !1; eziDebit.set(!0); break; case "SaveCustomer": if (!("customerLastName" in r)) return eziDebitErrorMessages.generateError("Customer last name field not found", r.submitError), eziDebit.set(!1), !1; if (eziDebit.getElement(r.customerLastName).value.length < 1) return eziDebitErrorMessages.generateError("No customer last name entered", r.submitError, r.customerLastName), eziDebit.set(!1), !1; if ("customerPostcode" in r) { var t = eziDebit.getElement(r.customerPostcode).value; if (t.length > 0 && 4 != t.length) return eziDebitErrorMessages.generateError("Invalid postcode entered", r.submitError, r.customerPostcode), eziDebit.set(!1), !1 } if ("nameOnCard" in r && ("" != eziDebit.getElement(r.cardNumber).value || "" != eziDebit.getElement(r.cardExpiryMonth).value || "" != eziDebit.getElement(r.cardExpiryYear).value || "" != eziDebit.getElement(r.nameOnCard).value)) { if (!validateCardDetails(r, !1)) return eziDebit.set(!1), !1; eziDebit.set(!0) } if ("accountName" in r && ("" != eziDebit.getElement(r.accountName).value || "" != eziDebit.getElement(r.accountBSB).value || "" != eziDebit.getElement(r.accountNumber).value)) { if (!validateAccountDetails(r)) return eziDebit.set(!1), !1; eziDebit.set(!0) } break; case "ChangeCustomerPaymentInfo": if ("customerRef" in r && "customerReference" in r) { if ("" == eziDebit.getElement(r.customerRef).value && "" == eziDebit.getElement(r.customerReference).value) return eziDebitErrorMessages.generateError("Either customerRef field or customerReference field must have a value specified", r.submitError, r.customerRef), !1 } else { if (!("customerRef" in r || "customerReference" in r)) return eziDebitErrorMessages.generateError("Either customerRef field or customerReference field is required", r.submitError, r.customerRef), !1; if ("customerRef" in r) { if ("" == eziDebit.getElement(r.customerRef).value) return eziDebitErrorMessages.generateError("The customerRef must have a value specified", r.submitError, r.customerRef), !1 } else if ("customerReference" in r && "" == eziDebit.getElement(r.customerReference).value) return eziDebitErrorMessages.generateError("The customerReference must have a value specified", r.submitError, r.customerRef), !1 } if ("accountNumber" in r) { if ("" == eziDebit.getElement(r.accountName).value && "" == eziDebit.getElement(r.accountBSB).value && "" == eziDebit.getElement(r.accountNumber).value) return eziDebitErrorMessages.generateError("You have not supplied bank account details", r.submitError), !1; if (!validateAccountDetails(r)) return eziDebit.set(!1), !1; eziDebit.set(!0) } if ("cardNumber" in r) { if ("" == eziDebit.getElement(r.cardNumber).value && "" == eziDebit.getElement(r.cardExpiryMonth).value && "" == eziDebit.getElement(r.cardExpiryYear).value && "" == eziDebit.getElement(r.nameOnCard).value) return eziDebitErrorMessages.generateError("You have not supplied credit card details", r.submitError), !1; if (!validateCardDetails(r, !1)) return eziDebit.set(!1), !1; eziDebit.set(!0) } } }, validateAccountDetails = function (e) { if (!("accountName" in e)) return eziDebitErrorMessages.generateError("Account name field not found", e.submitError), eziDebit.set(!1), !1; var r = eziDebit.getElement(e.accountName).value; return r.length < 2 || r.length > 50 ? (eziDebitErrorMessages.generateError("The account name is invalid", e.submitError, e.accountName), eziDebit.set(!1), !1) : "accountBSB" in e ? eziDebit.getElement(e.accountBSB).value.length < 6 ? (eziDebitErrorMessages.generateError("The BSB should be 6 digits", e.submitError, e.accountBSB), eziDebit.set(!1), !1) : "accountNumber" in e ? !(eziDebit.getElement(e.accountNumber).value.length < 2 && (eziDebitErrorMessages.generateError("The account number is invalid", e.submitError, e.accountNumber), eziDebit.set(!1), 1)) : (eziDebitErrorMessages.generateError("Account number field not found", e.submitError), eziDebit.set(!1), !1) : (eziDebitErrorMessages.generateError("BSB field not found", e.submitError), eziDebit.set(!1), !1) }, validateCardDetails = function (e, r) { if (!("nameOnCard" in e)) return eziDebitErrorMessages.generateError("Name on card field not found", e.submitError), eziDebit.set(!1), !1; var t = eziDebit.getElement(e.nameOnCard).value; if (t.length < 3 || t.length > 100) return eziDebitErrorMessages.generateError("The name on the card appears to be invalid", e.submitError, e.nameOnCard), eziDebit.set(!1), !1; if (!("cardNumber" in e)) return eziDebitErrorMessages.generateError("Card number field not found", e.submitError), eziDebit.set(!1), !1; if (eziDebit.getElement(e.cardNumber).value.length < 14) return eziDebitErrorMessages.generateError("The card number should be between 14 and 16 digits", e.submitError, e.cardNumber), eziDebit.set(!1), !1; if (!("cardExpiryMonth" in e)) return eziDebitErrorMessages.generateError("Card month expiry field not found", e.submitError), eziDebit.set(!1), !1; var i = eziDebit.getElement(e.cardExpiryMonth).value; if (!parseInt(i, 10)) return eziDebitErrorMessages.generateError("Month expiry must be a number", e.submitError, e.cardExpiryMonth), eziDebit.set(!1), !1; if (i.length < 1) return eziDebitErrorMessages.generateError("Must enter card month expiry", e.submitError, e.cardExpiryMonth), eziDebit.set(!1), !1; if (i > 12 || i < 1) return eziDebitErrorMessages.generateError("The card month expiry must be between 1 and 12", e.submitError, e.cardExpiryMonth), eziDebit.set(!1), !1; var a = (new Date).getFullYear(), n = (new Date).getMonth() + 1; if ((s = eziDebit.getElement(e.cardExpiryYear).value) == a && i < n) return eziDebitErrorMessages.generateError("The card expiry is in the past", e.submitError, e.cardExpiryMonth), eziDebit.set(!1), !1; if (!("cardExpiryYear" in e)) return eziDebitErrorMessages.generateError("Card month expiry field not found", e.submitError), eziDebit.set(!1), !1; var s = eziDebit.getElement(e.cardExpiryYear).value; if (!parseInt(s, 10)) return eziDebitErrorMessages.generateError("Year expiry must be a 4 digit number", e.submitError, e.cardExpiryYear), eziDebit.set(!1), !1; if (4 != s.length) return eziDebitErrorMessages.generateError("Year expiry must be a 4 digit number", e.submitError, e.cardExpiryYear), eziDebit.set(!1), !1; if (s < (a = (new Date).getFullYear())) return eziDebitErrorMessages.generateError("The card year expiry is in the past", e.submitError, e.cardExpiryYear), eziDebit.set(!1), !1; if (s > a + 20) return eziDebitErrorMessages.generateError("The card year expiry is more than 20 years in the future", e.submitError, e.cardExpiryYear), eziDebit.set(!1), !1; var o = null; "paymentAmount" in e && (o = eziDebit.getElement(e.paymentAmount).value); var u = null; if ("paymentReference" in e && (u = eziDebit.getElement(e.paymentReference).value), r = r || "paymentAmount" in e && o.length >= 1 && 0 != parseFloat(o) || "paymentReference" in e && u.length >= 1) { if (!("cardCCV" in e)) return eziDebitErrorMessages.generateError("Card CCV field not found", e.submitError), eziDebit.set(!1), !1; var m = eziDebit.getElement(e.cardCCV).value; if (14 != eziDebit.getElement(e.cardNumber).value.length) { if (["000", "0000"].indexOf(m) < 0 && !parseInt(m, 10)) return eziDebitErrorMessages.generateError("CCV must be a 3 or 4 digit number", e.submitError, e.cardCCV), eziDebit.set(!1), !1; if (m.length < 1 || m.length < 3 || m.length > 4) return eziDebitErrorMessages.generateError("The CCV number should be either 3 or 4 digits long", e.submitError, e.cardCCV), eziDebit.set(!1), !1 } if (!("paymentReference" in e)) return eziDebitErrorMessages.generateError("Payment reference field not found", e.submitError), eziDebit.set(!1), !1; if (u.length < 1) return eziDebitErrorMessages.generateError("No payment reference entered", e.submitError, e.paymentReference), eziDebit.set(!1), !1; if (!("paymentAmount" in e)) return eziDebitErrorMessages.generateError("Payment amount field not found", e.submitError), eziDebit.set(!1), !1; if (o.length < 1) return eziDebitErrorMessages.generateError("No payment amount entered", e.submitError, e.paymentAmount), eziDebit.set(!1), !1; if (!parseFloat(o)) return eziDebitErrorMessages.generateError("Payment amount invalid", e.submitError, e.paymentAmount), eziDebit.set(!1), !1 } return !0 }, entryIsNumber = function (e) { var r = e.which ? e.which : event.keyCode; return !(46 != r && r > 31 && (r < 48 || r > 57)) }, { validate: performValidation, validateNumber: entryIsNumber }), eziDebitCCValidator = (validate = function (e) { var r = e.length, t = parseInt(e), i = e.toString(); i = i.replace(/^\s+|\s+$/g, ""); for (var a, n, s = 0, o = !0, u = !1, m = 0; m < r; m++)a = "" + i.substring(m, m + 1), "-1" == "0123456789".indexOf(a) && (o = !1); if (o || (u = !1), 0 == r && u) u = !1; else if (r >= 15) { for (var c = r; c > 0; c--) { switch (n = parseInt(t) % 10, s += n = parseInt(n), c-- , t /= 10, n = parseInt(t) % 10, n *= 2) { case 10: n = 1; break; case 12: n = 3; break; case 14: n = 5; break; case 16: n = 7; break; case 18: n = 9; break; default: n = n }t /= 10, s += n } u = s % 10 == 0 } return u }, { validateCard: validate }), JSONP = function () { var e, r, t, i = 0, a = this, n = {}; function s(e) { return encodeURIComponent(e) } return { get: function (o, u, m, c, d) { r = -1 === (o || "").indexOf("?") ? "?" : "&", u = u || {}; for (t in u) u.hasOwnProperty(t) && (r += s(t) + "=" + s(u[t]) + "&"); var l, b, E, g, f = "json" + ++i; return a[f] = function (e) { m(e); try { delete a[f] } catch (e) { } a[f] = null }, l = o + r + (d || n.callbackName || "callback") + "=" + f, b = c, E = document.createElement("script"), g = !1, E.src = l, E.async = !0, setTimeout(function () { !g && b && b() }, n.timeout || 12e4), E.onload = E.onreadystatechange = function () { g || this.readyState && "loaded" !== this.readyState && "complete" !== this.readyState || (g = !0, E.onload = E.onreadystatechange = null, E && E.parentNode && E.parentNode.removeChild(E)) }, e || (e = document.getElementsByTagName("head")[0]), e.appendChild(E), f }, init: function (e) { n = e } } }();